import React, { useState, useEffect } from "react";
// –ü—Ä–∏–ø—É—Å—Ç—ñ–º–æ, —â–æ —É –≤–∞—Å —î —Ñ–∞–π–ª —Å—Ç–∏–ª—ñ–≤, —è–∫—â–æ –≤–∏ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ
// import "./Vinyls.css"; 

export default function Vinyls() {
  const [vinylList, setVinylList] = useState([]);
  const [selectedId, setSelectedId] = useState("");
  const [selectedVinyl, setSelectedVinyl] = useState(null);
  
  // üîπ CRUD –¥–ª—è –≤—ñ–Ω—ñ–ª—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ formData —Ç–∞ isModalOpen, —è–∫ —É –≤–∞—à–æ–º—É Vinyls.jsx)
  const [formData, setFormData] = useState({
    Title: "",
    Artist: "",
    Genre: "",
    Country: "",
    Published: "",
    Price: "",
    Photo: "",
  });
  const [isModalOpen, setIsModalOpen] = useState(false);

  // üîπ CRUD –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤ (–ù–û–í–ï)
  const [userId, setUserId] = useState("");
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [reviews, setReviews] = useState([]);

  const [reviewModalOpen, setReviewModalOpen] = useState(false); // –î–ª—è –º–æ–¥–∞–ª–∫–∏ –≤—ñ–¥–≥—É–∫—ñ–≤
  const [currentReview, setCurrentReview] = useState(null);
  const [modalRating, setModalRating] = useState(5);
  const [modalComment, setModalComment] = useState("");

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–Ω—ñ–ª—ñ–≤
  const loadVinyls = () => {
    fetch("http://localhost:5000/api/vinyls")
      .then((res) => res.json())
      .then((data) => setVinylList(data))
      .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ:", err));
  };

  useEffect(() => {
    loadVinyls();
  }, []);

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ (–ù–û–í–ï)
  const loadReviews = (id) => {
    fetch(`http://localhost:5000/api/vinyls/${id}/reviews`)
      .then((res) => res.json())
      .then((data) => setReviews(data))
      .catch((err) => console.error(err));
  };

  // üîπ –í–∏–±—ñ—Ä –≤—ñ–Ω—ñ–ª—É
  const handleSelectChange = (e) => {
    const id = e.target.value;
    setSelectedId(id);
    const found = vinylList.find((v) => v.ID.toString() === id);
    setSelectedVinyl(found);

    if (found) {
        loadReviews(id); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–Ω—ñ–ª—É
    } else {
        setReviews([]);
    }
  };

  // üîπ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è / —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–Ω—ñ–ª—É
  const handleOpenModal = (vinyl = null) => {
    if (vinyl) {
      setFormData({
        Title: vinyl.Title,
        Artist: vinyl.Artist,
        Genre: vinyl.Genre,
        Country: vinyl.Country,
        Published: vinyl.Published,
        Price: vinyl.Price,
        Photo: vinyl.Photo,
      });
      setSelectedId(vinyl.ID);
    } else {
      setFormData({
        Title: "", Artist: "", Genre: "", Country: "",
        Published: "", Price: "", Photo: "",
      });
      setSelectedId("");
    }
    setIsModalOpen(true);
  };

  // üîπ –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –≤—ñ–Ω—ñ–ª—É
  const handleCloseModal = () => {
    setIsModalOpen(false);
    setFormData({
      Title: "", Artist: "", Genre: "", Country: "",
      Published: "", Price: "", Photo: "",
    });
  };

  // üîπ –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ñ–æ—Ä–º–∏ –≤—ñ–Ω—ñ–ª—É
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // üîπ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–Ω—ñ–ª—É
  const handleSave = async () => {
    try {
      const method = selectedId ? "PUT" : "POST";
      const url = selectedId
        ? `http://localhost:5000/api/vinyls/${selectedId}`
        : "http://localhost:5000/api/vinyls";

      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–Ω—ñ–ª—É");

      const updated = await res.json();

      if (selectedId) {
        setVinylList((prev) =>
          prev.map((v) => (v.ID === updated.ID ? updated : v))
        );
        setSelectedVinyl(updated); 
      } else {
        setVinylList((prev) => [...prev, updated]);
      }

      handleCloseModal();
    } catch (err) {
      console.error(err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–Ω—ñ–ª");
    }
  };

  // üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–Ω—ñ–ª—É
  const handleDelete = async (id) => {
    if (!window.confirm("–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –≤—ñ–Ω—ñ–ª?")) return;
    try {
      const res = await fetch(`http://localhost:5000/api/vinyls/${id}`, {
        method: "DELETE",
      });
      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ");
      setVinylList((prev) => prev.filter((v) => v.ID !== id));
      setSelectedVinyl(null);
      setSelectedId("");
      setReviews([]); // –°–∫–∏–¥–∞—î–º–æ –≤—ñ–¥–≥—É–∫–∏
    } catch (err) {
      console.error(err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–Ω—ñ–ª");
    }
  };

  // --- –õ–û–ì–Ü–ö–ê –í–Ü–î–ì–£–ö–Ü–í (–ù–û–í–ï) ---

  // üîπ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
  const handleAddReview = async (e) => {
    e.preventDefault();
    if (!selectedVinyl) return alert("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–Ω—ñ–ª!");
    if (!userId || !comment) return alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!");

    try {
      const res = await fetch(
        `http://localhost:5000/api/vinyls/${selectedId}/reviews`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId, rating, comment }),
        }
      );
      const updatedReviews = await res.json(); 
      setReviews(updatedReviews);
      setUserId("");
      setComment("");
      setRating(5);
    } catch (err) {
      console.error(err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫.");
    }
  };

  // üîπ –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤: –í—ñ–¥–∫—Ä–∏—Ç—Ç—è
  const openReviewModal = (review) => {
    setCurrentReview(review);
    setModalRating(review.rating);
    setModalComment(review.comment);
    setReviewModalOpen(true);
  };

  // üîπ –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const saveReviewModal = async () => {
    try {
      const res = await fetch(`http://localhost:5000/api/reviews/${currentReview.ID}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ rating: modalRating, comment: modalComment }),
      });
      
      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É");

      setReviews(
        reviews.map((r) =>
          r.ID === currentReview.ID
            ? { ...r, rating: modalRating, comment: modalComment }
            : r
        )
      );
      setReviewModalOpen(false);
      setCurrentReview(null);
    } catch (err) {
      console.error(err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–≥—É–∫.");
    }
  };

  // üîπ –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤: –í–∏–¥–∞–ª–µ–Ω–Ω—è
  const deleteReviewModal = async () => {
    if (!window.confirm("–í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫?")) return;
    try {
      const res = await fetch(`http://localhost:5000/api/reviews/${currentReview.ID}`, {
        method: "DELETE",
      });
      
      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É");

      setReviews(reviews.filter((r) => r.ID !== currentReview.ID));
      setReviewModalOpen(false);
      setCurrentReview(null);
    } catch (err) {
      console.error(err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫.");
    }
  };

  return (
    <div className="catalog-section">
      <h2>–í—ñ–Ω—ñ–ª–∏ üé∂</h2>

      <button onClick={() => handleOpenModal()}>‚ûï –î–æ–¥–∞—Ç–∏ –≤—ñ–Ω—ñ–ª</button>

      <select value={selectedId} onChange={handleSelectChange} className="select-item">
        <option value="">-- –û–±–µ—Ä—ñ—Ç—å –≤—ñ–Ω—ñ–ª --</option>
        {vinylList.map((v) => (
          <option key={v.ID} value={v.ID}>
            {v.Title} ‚Äî {v.Artist}
          </option>
        ))}
      </select>

      {selectedVinyl && (
        <div className="product-card">
          <h3>{selectedVinyl.Title}</h3>
          <p>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {selectedVinyl.Artist}</p>
          <p>–ñ–∞–Ω—Ä: {selectedVinyl.Genre}</p>
          <p>–ö—Ä–∞—ó–Ω–∞: {selectedVinyl.Country}</p>
          <p>–†—ñ–∫: {selectedVinyl.Published}</p>
          <p>–¶—ñ–Ω–∞: {selectedVinyl.Price} $</p>
          {selectedVinyl.Photo && (
            <img
              src={`http://localhost:5000/uploads/${selectedVinyl.Photo}`}
              alt={selectedVinyl.Title}
            />
          )}

          <div className="vinyl-buttons">
            <button onClick={() => handleOpenModal(selectedVinyl)}>‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
            <button onClick={() => handleDelete(selectedVinyl.ID)}>üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
          </div>
          
          {/* –§–û–†–ú–ê –î–û–î–ê–í–ê–ù–ù–Ø –í–Ü–î–ì–£–ö–£ (–ù–û–í–ï) */}
          <form onSubmit={handleAddReview} className="review-form">
            <h4>–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫:</h4>
            <input
              placeholder="–í–∞—à ID"
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
            />
            <input
              type="number"
              min="1"
              max="5"
              value={rating}
              onChange={(e) => setRating(+e.target.value)}
            />
            <input
              placeholder="–ö–æ–º–µ–Ω—Ç–∞—Ä"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            />
            <button type="submit">–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
          </form>

          {/* –°–ü–ò–°–û–ö –í–Ü–î–ì–£–ö–Ü–í (–ù–û–í–ï) */}
          <div className="reviews">
            <h4>–í—ñ–¥–≥—É–∫–∏:</h4>
            {reviews.length === 0 ? (
              <p>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.</p>
            ) : (
              reviews.map((r) => (
                <div key={r.ID} className="review-item">
                  <b>{r.userId}</b>: {r.rating}‚òÖ ‚Äî {r.comment}
                  <br />
                  <small>{new Date(r.date).toLocaleString()}</small>
                  <button onClick={() => openReviewModal(r)}>
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / –í–∏–¥–∞–ª–∏—Ç–∏
                  </button>
                </div>
              ))
            )}
          </div>
        </div>
      )}

      {/* üîπ –ú–æ–¥–∞–ª–∫–∞ –≤—ñ–Ω—ñ–ª—É */}
      {isModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h3>{selectedId ? "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤—ñ–Ω—ñ–ª" : "–î–æ–¥–∞—Ç–∏ –≤—ñ–Ω—ñ–ª"}</h3>
            <input
              name="Title"
              placeholder="–ù–∞–∑–≤–∞"
              value={formData.Title}
              onChange={handleChange}
            />
            <input
              name="Artist"
              placeholder="–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å"
              value={formData.Artist}
              onChange={handleChange}
            />
            <input
              name="Genre"
              placeholder="–ñ–∞–Ω—Ä"
              value={formData.Genre}
              onChange={handleChange}
            />
            <input
              name="Country"
              placeholder="–ö—Ä–∞—ó–Ω–∞"
              value={formData.Country}
              onChange={handleChange}
            />
            <input
              name="Published"
              placeholder="–†—ñ–∫"
              value={formData.Published}
              onChange={handleChange}
            />
            <input
              name="Price"
              placeholder="–¶—ñ–Ω–∞"
              value={formData.Price}
              onChange={handleChange}
            />
            <input
              name="Photo"
              placeholder="–ù–∞–∑–≤–∞ —Ñ–æ—Ç–æ (—Ñ–∞–π–ª —É /uploads)"
              value={formData.Photo}
              onChange={handleChange}
            />

            <div className="modal-actions">
              <button onClick={handleSave}>üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
              <button onClick={handleCloseModal}>‚ùå –ó–∞–∫—Ä–∏—Ç–∏</button>
            </div>
          </div>
        </div>
      )}

      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤—ñ–¥–≥—É–∫—ñ–≤ (–ù–û–í–ï) */}
      {reviewModalOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É</h3>
            <input
              type="number"
              min="1"
              max="5"
              value={modalRating}
              onChange={(e) => setModalRating(+e.target.value)}
            />
            <textarea
              value={modalComment}
              onChange={(e) => setModalComment(e.target.value)}
            />
            <div className="modal-buttons">
              <button onClick={saveReviewModal}>–ó–±–µ—Ä–µ–≥—Ç–∏</button>
              <button onClick={deleteReviewModal}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
              <button onClick={() => setReviewModalOpen(false)}>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}