import React, { useState, useEffect } from "react";
import "./Cassettes.css"; // –ü—ñ–¥–∫–ª—é—á–∏–º–æ CSS –¥–ª—è –º–æ–¥–∞–ª–∫–∏

export default function Cassettes() {
  const [cassetteList, setCassetteList] = useState([]);
  const [selectedId, setSelectedId] = useState("");
  const [selectedCassette, setSelectedCassette] = useState(null);
  const [userId, setUserId] = useState("");
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [reviews, setReviews] = useState([]);

  // –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const [modalOpen, setModalOpen] = useState(false);
  const [currentReview, setCurrentReview] = useState(null);
  const [modalRating, setModalRating] = useState(5);
  const [modalComment, setModalComment] = useState("");

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Å–µ—Ç
  useEffect(() => {
    fetch("http://localhost:5000/api/cassettes")
      .then(res => res.json())
      .then(data => setCassetteList(data))
      .catch(err => console.error(err));
  }, []);

  const handleSelectChange = (e) => {
    const id = e.target.value;
    setSelectedId(id);
    const found = cassetteList.find(c => c.ID.toString() === id);
    setSelectedCassette(found);

    if (found) {
      fetch(`http://localhost:5000/api/cassettes/${id}/reviews`)
        .then(res => res.json())
        .then(data => setReviews(data))
        .catch(err => console.error(err));
    } else {
      setReviews([]);
    }
  };

  const handleAddReview = async (e) => {
    e.preventDefault();
    if (!selectedCassette) return alert("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Å–µ—Ç—É!");
    if (!userId || !comment) return alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!");

    try {
      const res = await fetch(`http://localhost:5000/api/cassettes/${selectedId}/reviews`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, rating, comment }),
      });
      const updatedReviews = await res.json();
      setReviews(updatedReviews);
      setUserId("");
      setComment("");
      setRating(5);
    } catch (err) {
      console.error(err);
    }
  };

  // üîπ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
  const openModal = (review) => {
    setCurrentReview(review);
    setModalRating(review.rating);
    setModalComment(review.comment);
    setModalOpen(true);
  };

  // üîπ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
  const saveModal = async () => {
    try {
      await fetch(`http://localhost:5000/api/reviews/${currentReview.ID}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ rating: modalRating, comment: modalComment }),
      });
      setReviews(reviews.map(r => r.ID === currentReview.ID ? { ...r, rating: modalRating, comment: modalComment } : r));
      setModalOpen(false);
      setCurrentReview(null);
    } catch (err) {
      console.error(err);
    }
  };

  // üîπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –º–æ–¥–∞–ª–∫–∏
  const deleteModal = async () => {
    if (!window.confirm("–í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫?")) return;
    try {
      await fetch(`http://localhost:5000/api/reviews/${currentReview.ID}`, { method: "DELETE" });
      setReviews(reviews.filter(r => r.ID !== currentReview.ID));
      setModalOpen(false);
      setCurrentReview(null);
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="catalog-section">
      <h2>–ö–∞—Å–µ—Ç–∏</h2>

      <select value={selectedId} onChange={handleSelectChange} className="select-item">
        <option value="">-- –û–±–µ—Ä—ñ—Ç—å –∫–∞—Å–µ—Ç—É --</option>
        {cassetteList.map(c => (
          <option key={c.ID} value={c.ID}>
            {c.Title} ‚Äî {c.Artist}
          </option>
        ))}
      </select>

      {selectedCassette && (
        <div className="product-card">
          <h3>{selectedCassette.Title}</h3>
          <p>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {selectedCassette.Artist}</p>
          <p>–ñ–∞–Ω—Ä: {selectedCassette.Genre}</p>
          <p>–†—ñ–∫: {selectedCassette.Published}</p>
          <p>–¶—ñ–Ω–∞: {selectedCassette.Price} $</p>
          <p>–ö—Ä–∞—ó–Ω–∞: {selectedCassette.Country}</p>
          {selectedCassette.Photo && (
            <img
              src={`http://localhost:5000/uploads/${selectedCassette.Photo}`}
              alt={selectedCassette.Title}
            />
          )}

          <form onSubmit={handleAddReview} className="review-form">
            <input placeholder="–í–∞—à ID" value={userId} onChange={(e) => setUserId(e.target.value)} />
            <input type="number" min="1" max="5" value={rating} onChange={(e) => setRating(+e.target.value)} />
            <input placeholder="–ö–æ–º–µ–Ω—Ç–∞—Ä" value={comment} onChange={(e) => setComment(e.target.value)} />
            <button type="submit">–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
          </form>

          <div className="reviews">
            <h4>–í—ñ–¥–≥—É–∫–∏:</h4>
            {reviews.length === 0 ? (
              <p>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.</p>
            ) : (
              reviews.map((r) => (
                <div key={r.ID} className="review-item">
                  <b>{r.userId}</b>: {r.rating}‚òÖ ‚Äî {r.comment}
                  <br />
                  <small>{new Date(r.date).toLocaleString()}</small>
                  <button onClick={() => openModal(r)}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / –í–∏–¥–∞–ª–∏—Ç–∏</button>
                </div>
              ))
            )}
          </div>
        </div>
      )}

      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      {modalOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É</h3>
            <input type="number" min="1" max="5" value={modalRating} onChange={(e) => setModalRating(+e.target.value)} />
            <textarea value={modalComment} onChange={(e) => setModalComment(e.target.value)} />
            <div className="modal-buttons">
              <button onClick={saveModal}>–ó–±–µ—Ä–µ–≥—Ç–∏</button>
              <button onClick={deleteModal}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
              <button onClick={() => setModalOpen(false)}>–í—ñ–¥–º—ñ–Ω–∏—Ç–∏</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
