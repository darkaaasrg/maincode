// frontend/src/components/ReviewsContainer.jsx
import React, { useState, useEffect } from 'react';
import ReviewList from './ReviewList';
import ReviewForm from './ReviewForm'; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç—É—Ç

const API_URL = "http://localhost:5000/api/reviews";

export default function ReviewsContainer({ productId, productType }) {
    const [reviews, setReviews] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ (GET-–∑–∞–ø–∏—Ç –¥–æ /api/reviews)
    const fetchReviews = async () => {
        try {
            const response = await fetch(API_URL);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // üí° –§–Ü–õ–¨–¢–†–£–Ñ–ú–û: –û—Å–∫—ñ–ª—å–∫–∏ API –ø–æ–≤–µ—Ä—Ç–∞—î –í–°–Ü –≤—ñ–¥–≥—É–∫–∏, 
            // —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —ó—Ö –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ –∑–∞ productId —Ç–∞ productType, 
            // —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ.
            const productReviews = data.filter(r => 
                r.productId === productId && r.productType === productType
            );

            // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à—ñ)
            productReviews.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            setReviews(productReviews);
            setError(null);
        } catch (e) {
            console.error("Error fetching reviews:", e);
            setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–≥—É–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∫–µ–Ω–¥.");
        } finally {
            setLoading(false);
        }
    };

    // –í–∏–∫–ª–∏–∫ GET-–∑–∞–ø–∏—Ç—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    useEffect(() => {
        fetchReviews();
    }, [productId, productType]);

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É (–∑ ReviewForm)
    const handleAddReview = (newReview) => {
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç–æ—á–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
        if (newReview.productId === productId && newReview.productType === productType) {
             setReviews(prevReviews => [newReview, ...prevReviews]);
        }
    };


    if (loading) return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤...</div>;
    if (error) return <div className="text-red-600 p-4 border border-red-200">{error}</div>;

    return (
        <div className="p-4 border rounded-lg shadow">
            <h2 className="text-xl font-bold mb-4">–í—ñ–¥–≥—É–∫–∏</h2>
            
            {/* –§–æ—Ä–º–∞ –¥–ª—è POST-–∑–∞–ø–∏—Ç—ñ–≤ */}
            <ReviewForm 
                onAdd={handleAddReview} 
                productId={productId} 
                productType={productType}
            />
            
            {/* ReviewList –æ—Ç—Ä–∏–º—É—î –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ */}
            <ReviewList reviews={reviews} />
        </div>
    );
}